<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- [y] hybris Platform Copyright (c) 2000-2013 hybris AG All rights reserved. 
	This software is the confidential and proprietary information of hybris ("Confidential 
	Information"). You shall not disclose such Confidential Information and shall 
	use it only in accordance with the terms of the license agreement you entered 
	into with hybris. -->
<!-- All hybris buildcallbacks.xml macrodefinitions: Build/Documentation 
	before/after ant macro "clean" <macrodef name="sapproductconfigruntimessc_before_clean"/> 
	<macrodef name="sapproductconfigruntimessc_after_clean"/> before/after ant 
	macro "build" <macrodef name="sapproductconfigruntimessc_before_build"/> 
	<macrodef name="sapproductconfigruntimessc_after_build"/> before/after ant 
	macro "compile_core" - the core module of the extension <macrodef name="sapproductconfigruntimessc_before_compile_core"> 
	<macrodef name="sapproductconfigruntimessc_after_compile_core"> before/after 
	ant macro "compile_web" - the web module of the extension <macrodef name="sapproductconfigruntimessc_before_compile_web" 
	/> <macrodef name="sapproductconfigruntimessc_after_compile_web" /> before/after 
	ant macro "compile_hmc" - the hmc module of the extension <macrodef name="sapproductconfigruntimessc_before_compile_hmc" 
	/> <macrodef name="sapproductconfigruntimessc_after_compile_hmc" /> Preparing 
	extension will be called in the beginning of the ant call and only once (also 
	when using multiple ant targets e.g. ant build yunittest) <macrodef name="sapproductconfigruntimessc_only_once_prepare"/> 
	Creating ear module/production before/after ant macro "ear" <macrodef name="sapproductconfigruntimessc_before_ear"/> 
	<macrodef name="sapproductconfigruntimessc_after_ear"/> before/after ant 
	macro "production" - for hybris server only <macrodef name="sapproductconfigruntimessc_before_production" 
	/> <macrodef name="sapproductconfigruntimessc_after_production" /> JUnit 
	Test before/after ant macro "yunitinit" <macrodef name="sapproductconfigruntimessc_before_yunitinit" 
	/> <macrodef name="sapproductconfigruntimessc_after_yunitinit" /> before/after 
	ant macro "yunit" <macrodef name="sapproductconfigruntimessc_before_yunit" 
	/> <macrodef name="sapproductconfigruntimessc_after_yunit" /> Distribution 
	package before/after ant macro "dist" - internal target; only for use when 
	platform is available in source code <macrodef name="sapproductconfigruntimessc_after_dist"/> 
	<macrodef name="sapproductconfigruntimessc_before_dist"/> before/after ant 
	macro "dist_copy" - internal target; only for use when platform is available 
	in source code <macrodef name="sapproductconfigruntimessc_before_dist_copy"/> 
	<macrodef name="sapproductconfigruntimessc_after_dist_copy"/> With these 
	filters you can override the default extension filters defined in platform/resources/ant/dist/filtersets.xml 
	<patternset id="extension.sapproductconfigruntimessc.binary.filter"> <patternset 
	refid="extension.filter" /> <exclude name="**/*-source.jar" /> </patternset> 
	<patternset id="extension.sapproductconfigruntimessc.source.filter"> <exclude 
	name="**/bin/**" /> </patternset> -->
<project name="sapproductconfigruntimessc_buildcallbacks">

	<patternset id="ssc.patterns">
		<include name="com.sap.custdev.projects.fbs.slc*.jar" />
		<include name="engine*.jar" />
		<include name="common*.jar" />
		<include name="dataloader*.jar" />
		<include name="database*.jar" />
	</patternset>
	<patternset id="ssc.patterns.exclude">
		<exclude name="com.sap.custdev.projects.fbs.slc*.jar" />
		<exclude name="engine*.jar" />
		<exclude name="common*.jar" />
		<exclude name="dataloader*.jar" />
		<exclude name="database*.jar" />
	</patternset>
	<macrodef name="sapproductconfigruntimessc_before_dist">
		<sequential>

			<property name="ssc.buildtime.path" value="${ext.sapproductconfigruntimessc.path}/lib" />
			<echo level="info"
				message="Delete any SSC Jars from ${ssc.buildtime.path} before packaging" />
			<delete failonerror="true" deleteonexit="false">

				<fileset id="sscfiles" dir="${ssc.buildtime.path}">
					<patternset refid="ssc.patterns" />
				</fileset>


			</delete>


		</sequential>
	</macrodef>


	<!-- <macrodef name="sapproductconfigruntimessc_after_build"> <sequential> 
		<echo level="info" message="Deleting SSC Jars from ${ssc.buildtime.path}" 
		/> <delete failonerror="false" deleteonexit="true"> <fileset dir="${ssc.buildtime.path}" 
		includes="com.sap.custdev.projects.fbs.slc*.jar" /> </delete> <ysetplatformproperties 
		/> </sequential> </macrodef> -->

	<!-- Called whenever 'ant ear' is used. this callback can be used to modify 
		the content of the ear file ${ear.path}: path to ear -->
	<macrodef name="sapproductconfigruntimessc_before_ear">
		<sequential>

			<!-- you can do anything before the EAR file is being packed -->

		</sequential>
	</macrodef>

	<patternset id="extension.sapproductconfigruntimessc.binary.filter">
		<patternset refid="extension.binary.filter" />
		<patternset refid="ssc.patterns.exclude"/>
		<exclude name="lib/com.sap.custdev.projects.fbs.slc*.jar" />
	</patternset>

	<patternset id="extension.sapproductconfigruntimessc.source.filter">
		<patternset refid="extension.source.filter" />
		<patternset refid="ssc.patterns.exclude"/>
		<exclude name="lib/com.sap.custdev.projects.fbs.slc*.jar" />
	</patternset>


</project>
