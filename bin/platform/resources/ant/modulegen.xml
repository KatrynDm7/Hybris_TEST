<project name="modulegenmacros">

	<macrodef name="modulegen_validate">
		<attribute name="input.name" />
		<attribute name="input.module" />
		<sequential>

			<!-- Overwrite properties changed by input dialog -->
			<var name="extgen.extension.name" value="@{input.name}" />
			<getextensionsformeta resultproperty="module.list" metakey="modulegen-name" metavalue="@{input.module}" />

			<condition property="legal-extensionname">
				<matches pattern="^[A-Za-z]+[A-Za-z0-9]*$" string="${extgen.extension.name}" />
			</condition>
			<fail message="There are not allowed characters in the extension name '${extgen.extension.name}'." unless="legal-extensionname" />

			<for list="${module.list}" delimiter="," param="module">
				<sequential>
					<var name="verify.extgen.directory.source" value="${ext.@{module}.path}" />
					<echo message="Using extension template source: ${verify.extgen.directory.source}" />
					<!-- debug -->
					<condition property="legal-extensionsource">
						<available file="${verify.extgen.directory.source}" />
					</condition>
					<fail message="Source directory '${verify.extgen.directory.source}' for template '@{input.name}' does not exist." unless="legal-extensionsource" />
				</sequential>
			</for>

		</sequential>
	</macrodef>

	<macrodef name="modulegen_init">
		<attribute name="input.name" />
		<attribute name="input.package" />
		<attribute name="input.module" />

		<sequential>

			<if>
				<not>
					<available file="${extgen.directory.source}/extgen.properties" />

				</not>
				<then>
					<fail message="extgen.properties in source extension not found! this is not a template!" />
				</then>
			</if>

			<var name="YEXTNAME_TOKEN" unset="true" />
			<var name="YPACKAGE_TOKEN" unset="true" />
			<var name="YCLASSPREFIX_TOKEN" unset="true" />
			<var name="YMANAGER_TOKEN" unset="true" />
			<var name="YMODULE_TOKEN" unset="true" />
			<var name="YGENERATED_TOKEN" unset="true" />
			<var name="YMODULE_PACKAGE_ROOT" unset="true" />
			<var name="YMODULE_CLASS_PREFIX" unset="true" />

			<var name="extgen.extension.package" unset="true" />
			<var name="extgen.package" unset="true" />
			<var name="extgen.package.directory" unset="true" />

			<var name="extension.suffix.name" unset="true" />
			<var name="extension.classprefix" unset="true" />
			<var name="synthetic.extension.name" unset="true" />

			<property file="${extgen.directory.source}/extgen.properties" />

			<propertyregex property="extension.suffix.name" input="${YEXTNAME_TOKEN}" regexp="${YMODULE_TOKEN}(.*)" select="\1" casesensitive="false" />

			<var name="synthetic.extension.name" value="${extgen.extension.name}${extension.suffix.name}" />

			<echo level="debug">synthetic extension = ${synthetic.extension.name}</echo>
			<var name="extgen.extension.package" value="@{input.package}.${YMODULE_PACKAGE_ROOT}" />

			<echo level="debug">package name: ${extgen.extension.package}</echo>
			<!-- default extension target - now a logical root -->
			<property name="extension.directory.target.root" value="${extgen.extension.path}/${extgen.extension.name}" />

			<!-- default extension classprefix -->
			<property name="extension.abstractclassprefix" value="Generated" />

			<!-- default package (if not set in properties file) -->
			<property name="extgen.extension.package" value="de.hybris.platform.${extgen.extension.name}" />
			<property name="extgen.package" value="${extgen.extension.package}" />
			<propertyregex property="extgen.package.directory" input="${extgen.package}" regexp="\." replace="/" global="true" defaultValue="${extgen.package}" />

			<!-- default source directory (if not set in properties file) -->
			<property name="extgen.directory.source" value="templates/yempty" />

			<var name="extension.managername" unset="true" />

			<!-- default classprefix (if not set in properties file) -->
			<property name="extension.classprefix" value="${extgen.extension.name}${YMODULE_CLASS_PREFIX}" />
			<yfirstletteruppercase property="extension.classprefix" />
			<echo level="debug">extension classprefix = ${extension.classprefix}</echo>

			<!-- default manager name (if not set in properties file) -->
			<property name="extension.managername" value="${extension.classprefix}Manager" />
			<yfirstletteruppercase property="extension.managername" />

			<!-- default manager superclass (if not set in properties file) -->
			<property name="extension.managersuperclass" value="de.hybris.platform.jalo.extension.Extension" />

			<propertyregex property="extension.managersuperclassname" input="${extension.managersuperclass}" regexp="^.*\.([^\.]*)$$" replace="\1" global="false" override="true" />

			<!-- manager superclass impl/ejbimpl/ejb/home/remote -->
			<property name="extension.managersuperclassimpl" value="${extension.managersuperclass}.${extension.managersuperclassname}Impl" />
			<propertyregex property="extension.managersuperclassejbimpl" input="${extension.managersuperclass}" regexp="^(.*\.)jalo(\..*)$$" replace="\1jaloimpl\2EJBImpl" global="false" override="true" />
			<propertyregex property="extension.managersuperclassejb" input="${extension.managersuperclass}" regexp="^(.*\.)jalo(\..*)$$" replace="\1session\2EJB" global="false" override="true" />
			<propertyregex property="extension.managersuperclasshome" input="${extension.managersuperclass}" regexp="^(.*\.)jalo(\..*)$$" replace="\1session\2Home" global="false" override="true" />
			<propertyregex property="extension.managersuperclassremote" input="${extension.managersuperclass}" regexp="^(.*\.)jalo(\..*)$$" replace="\1session\2Remote" global="false" override="true" />

			<var name="extgen.directory.extensions.tmp" value="${extgen.directory.tmp}/${working.extension}" />
			<var name="extgen.directory.extension.final" value="${extgen.directory.tmp}_final/${working.extension}" />

		</sequential>
	</macrodef>

	<macrodef name="clean_modulegen_temp" description="clean up all temporarily used folders and files">
		<sequential>
			<delete dir="${extgen.directory.tmp}_final" quiet="true" />
			<delete dir="${extgen.directory.tmp}" quiet="true" />
		</sequential>
	</macrodef>

	<macrodef name="prepare_modulegen_temp">
		<sequential>

			<mkdir dir="${extgen.directory.extensions.tmp}" />

			<echo message="Copying template files from ${extgen.directory.source} to ${extgen.directory.extensions.tmp}" />
			<copy todir="${extgen.directory.extensions.tmp}">
				<fileset dir="${extgen.directory.source}">
					<include name="**/*" />
				</fileset>
			</copy>

			<!-- in generated extension, disable jspcompile as default value -->
			<replaceregexp file="${extgen.directory.extensions.tmp}/extensioninfo.xml" match='jspcompile="true"' replace='jspcompile="false"' byline="true" />
		</sequential>
	</macrodef>

	<macrodef name="filter_modulegen_files">
		<sequential>

			<propertyregex property="platformhome_slash" input="${platformhome}" regexp="\\" replace="/" global="true" defaultValue="${platformhome}" />

			<echo message="Replacing tokens in template files: ${extgen.directory.tmp}" />
			<!-- debug -->
			<replace dir="${extgen.directory.extensions.tmp}" excludes="**/*.class,**/*.jar,**/*.jpg,**/*.jpeg,**/*.gif,**/*.png,**/*.bmp" summary="true" encoding="UTF-8">
				<replacefilter token="@EXTGEN_VERSION@" value="${extgen.version}" />
				<replacefilter token="@PLATFORM_HOME@" value="${platformhome_slash}" />

				<replacefilter token="${YPACKAGE_TOKEN}DIR" value="${extgen.package.directory}" />
				<replacefilter token="${YPACKAGE_TOKEN}" value="${extgen.extension.package}" />
				<!-- extgen.package  -->
				<replacefilter token="${YGENERATED_TOKEN}" value="${extension.abstractclassprefix}" />
				<replacefilter token="${YCLASSPREFIX_TOKEN}" value="${extension.classprefix}" />

				<replacefilter token="YMANAGEREJBIMPLSUPERCLASS" value="${extension.managersuperclassejbimpl}" />
				<replacefilter token="YMANAGERIMPLSUPERCLASS" value="${extension.managersuperclassimpl}" />
				<replacefilter token="YMANAGEREJBSUPERCLASS" value="${extension.managersuperclassejb}" />
				<replacefilter token="YMANAGERHOMESUPERCLASS" value="${extension.managersuperclasshome}" />
				<replacefilter token="YMANAGEREREMOTEUPERCLASS" value="${extension.managersuperclassremote}" />
				<replacefilter token="YMANAGERSUPERCLASS" value="${extension.managersuperclass}" />

				<replacefilter token="${YMANAGER_TOKEN}" value="${extension.managername}" />
				<replacefilter token="${YEXTNAME_TOKEN}" value="${synthetic.extension.name}" />
			</replace>

			<!-- 
				replace the extension manager superclass additionally in extensioninfo.xml 
			-->
			<replaceregexp file="${extgen.directory.extensions.tmp}/extensioninfo.xml" match="(webroot=)&quot;.*&quot;" replace="\1&quot;/${synthetic.extension.name}&quot;" />

			<echo message="Moving and renaming template files to: ${extgen.directory.extension.final}" level="debug" />

			<copy todir="${extgen.directory.extension.final}" includeemptydirs="false">
				<fileset dir="${extgen.directory.extensions.tmp}">
					<include name="**/*" />
				</fileset>
				<chainedmapper>
					<filtermapper>
						<replaceregex pattern="${YPACKAGE_TOKEN}DIR" replace="${extgen.package.directory}" flags="g" />
					</filtermapper>
					<filtermapper>
						<replaceregex pattern="${YPACKAGE_TOKEN}" replace="${extgen.package.directory}" flags="g" />
					</filtermapper>
					<filtermapper>
						<replaceregex pattern="${YGENERATED_TOKEN}" replace="${extension.abstractclassprefix}" flags="g" />
					</filtermapper>
					<filtermapper>
						<replaceregex pattern="${YCLASSPREFIX_TOKEN}" replace="${extension.classprefix}" flags="g" />
					</filtermapper>
					<filtermapper>
						<replaceregex pattern="${YMANAGER_TOKEN}" replace="${extension.managername}" flags="g" />
					</filtermapper>
					<filtermapper>
						<replaceregex pattern="${YEXTNAME_TOKEN}" replace="${synthetic.extension.name}" flags="g" />
					</filtermapper>
				</chainedmapper>
			</copy>
		</sequential>
	</macrodef>

	<macrodef name="modulegen_update_cross_dependencies">
		<sequential>
			<!-- Fix the extensioninfo.xml references -->
			<var name="extension.dependency.token" value="&lt;requires-extension name=&quot;${YEXTNAME_TOKEN}&quot;" />
			<var name="extension.dependency.replacement" value="&lt;requires-extension name=&quot;${synthetic.extension.name}&quot;" />
			<echo level="debug">Fix extension references. replace [${extension.dependency.token}] with [${extension.dependency.replacement}]</echo>
			<replace dir="${extgen.directory.tmp}_final" includes="**/extensioninfo.xml" summary="true" encoding="UTF-8">
				<replacefilter token="${extension.dependency.token}" value="${extension.dependency.replacement}" />
			</replace>

			<!-- Fix eclipse references -->
			<var name="eclipse.dependency.token" value="path=&quot;/${YEXTNAME_TOKEN}&quot;" />
			<var name="eclipse.dependency.replacement" value="path=&quot;/${synthetic.extension.name}&quot;" />
			<echo level="debug">Fix eclipse references. replace [${eclipse.dependency.token}] with [${eclipse.dependency.replacement}]</echo>
			<replace dir="${extgen.directory.tmp}_final" includes="**/.classpath" summary="true">
				<replacefilter token="${eclipse.dependency.token}" value="${eclipse.dependency.replacement}" />
			</replace>

			<!-- Java package references -->
			<echo level="debug">Fix package references. replace [${YPACKAGE_TOKEN}] with [${extgen.extension.package}]</echo>
			<replace dir="${extgen.directory.tmp}_final" excludes="**/*.class,**/*.jar,**/*.jpg,**/*.jpeg,**/*.gif,**/*.png,**/*.bmp" summary="true" encoding="UTF-8">
				<replacefilter token="${YPACKAGE_TOKEN}" value="${extgen.extension.package}" />
			</replace>
		</sequential>
	</macrodef>

	<macrodef name="modulegen_copy_extension">
		<sequential>
			<var name="extension.directory.target" value="${extension.directory.target.root}/${extgen.extension.name}${extension.suffix.name}" />
			<var name="extension.dirs" value="${extension.dirs}&#10;&lt;extension dir=&quot;${extension.directory.target}&quot;/&gt;" />
			<echo level="debug">Target = ${extension.directory.target}</echo>
			<if>
				<available file="${extension.directory.target}" />
				<then>
					<fail message="Directory ${extension.directory.target} already exists." />
				</then>
				<else>
					<mkdir dir="${extension.directory.target}/lib" />
					<copy todir="${extension.directory.target}/">
						<fileset dir="${extgen.directory.extension.final}">
							<include name="**/*" />
							<exclude name="extgen.properties" />
							<exclude name="classes/**" />
							<exclude name="hmc/classes/**" />
							<exclude name="temp/**" />
							<exclude name="bin/**" />
							<exclude name="web/webroot/WEB-INF/classes/**" />
							<exclude name="web/classes/**" />
							<exclude name="testclasses/**" />
							<exclude name="platformhome.properties" />
							<exclude name="extensioninfo.xsd" />
							<exclude name="resources/items.xsd" />
							<exclude name="resources/beans.xsd" />
							<exclude name="resources/hmc.xsd" />
							<exclude name="build.xml" />
						</fileset>
					</copy>

					<!-- delete extgen macros in buildcallbacks.xml -->
					<if>
						<available file="${extension.directory.target}/buildcallbacks.xml" />
						<then>
							<xmltask source="${extension.directory.target}/buildcallbacks.xml" dest="${extension.directory.target}/buildcallbacks.xml">
								<remove path="//*[@name='${extgen.extension.name}_before_extgen']" />
								<remove path="//*[@name='${extgen.extension.name}_after_extgen']" />
							</xmltask>
						</then>
					</if>

					<!-- delete template marker in extensioninfo.xml -->

					<xmltask source="${extension.directory.target}/extensioninfo.xml" dest="${extension.directory.target}/extensioninfo.xml">
						<remove path="//*[@key='modulegen-name']" />
					</xmltask>
				</else>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="modulegen_generate" description="generates the new module extension">
		<sequential>
			<!-- remove all trailing white spaces in the specified files -->
			<replaceregexp match="[ \t]+$" replace="" flags="g" byline="true">
				<fileset dir=".">
					<include name="${platformhome}/extgen/project.properties" />
					<include name="${platformhome}/extgen/local.properties" />
				</fileset>
			</replaceregexp>

			<property file="${platformhome}/extgen/local.properties" />
			<property file="${platformhome}/extgen/project.properties" />

			<!-- *************************
				Add here new templates
			************************** -->
			<getmetavaluesforkey resultproperty="default.modules" metakey="modulegen-name" />
			<property name="extgen.version" value="4.1" />
			<property name="extgen.directory.tmp" value="${temp.dir}/extgen" />

			<input validargs="${default.modules}" defaultvalue="${modulegen.module.default}" addproperty="input.module">
Please choose a template for generation.
Press [Enter] to use the default value</input>

			<input defaultvalue="${extgen.extension.name}" addproperty="input.name">
Please choose the name of your module extension. It has to start with a letter followed by letters and/or numbers.
Press [Enter] to use the default value</input>

			<input defaultvalue="${extgen.extension.package}" addproperty="input.package">
Please choose the base package name of your extensions. It has to fulfill java package name convention. Each extension in the module will add its name to this package.
Press [Enter] to use the default value</input>

			<modulegen_validate input.name="${input.name}" input.module="${input.module}" />

			<var name="module.name" value="${input.module}" />
			<var name="extension.dirs" value="" />

			<clean_modulegen_temp />

			<for list="${module.list}" delimiter="," param="current.extension">
				<sequential>
					<echo>Processing extension @{current.extension}</echo>
					<var name="extgen.directory.source" value="${ext.@{current.extension}.path}" />
					<var name="working.extension" value="@{current.extension}" />
					<echo level="debug">Source = ${extgen.directory.source}</echo>
					<modulegen_init input.name="${input.name}" input.package="${input.package}" input.module="${module}" />
					<prepare_modulegen_temp />
					<filter_modulegen_files />
				</sequential>
			</for>

			<!-- Replace all package tokens across all module extensions -->
			<for list="${module.list}" delimiter="," param="current.extension">
				<sequential>
					<echo>Processing cross dependencies on extension @{current.extension}</echo>
					<var name="extgen.directory.source" value="${ext.@{current.extension}.path}" />
					<var name="working.extension" value="@{current.extension}" />
					<modulegen_init input.name="${input.name}" input.package="${input.package}" input.module="${module}" />
					<modulegen_update_cross_dependencies />
				</sequential>
			</for>

			<!-- Finally copy all extensions to their correct location -->
			<for list="${module.list}" delimiter="," param="current.extension">
				<sequential>
					<echo>Processing final copy for extension @{current.extension}</echo>
					<var name="extgen.directory.source" value="${ext.@{current.extension}.path}" />
					<var name="working.extension" value="@{current.extension}" />
					<modulegen_init input.name="${input.name}" input.package="${input.package}" input.module="${module}" />
					<modulegen_copy_extension />
				</sequential>
			</for>

			<echo>
	
	Next steps:
	
1) Add your extension to your ${HYBRIS_CONFIG_DIR}/localextensions.xml
		${extension.dirs}

2) Remove the following extensions from your ${HYBRIS_CONFIG_DIR}/localextensions.xml
		${module.list}

3) Make sure the applicationserver is stopped before you build the extension the first time.
	
4) Perform 'ant' in your hybris/platform directory.

5) Restart the applicationserver
		
			</echo>
		</sequential>
	</macrodef>
</project>