/*
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2013 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 * 
 *  
 */
package de.hybris.platform.catalog.jalo;

import static junit.framework.Assert.assertNotNull;
import static org.junit.Assert.assertEquals;

import de.hybris.bootstrap.annotations.IntegrationTest;
import de.hybris.platform.catalog.constants.CatalogConstants;
import de.hybris.platform.category.jalo.Category;
import de.hybris.platform.jalo.ConsistencyCheckException;
import de.hybris.platform.jalo.SearchResult;
import de.hybris.platform.jalo.c2l.Language;
import de.hybris.platform.jalo.flexiblesearch.FlexibleSearch;
import de.hybris.platform.jalo.flexiblesearch.SavedQuery;
import de.hybris.platform.jalo.media.Media;
import de.hybris.platform.jalo.product.Product;
import de.hybris.platform.jalo.type.ComposedType;
import de.hybris.platform.jalo.type.JaloAbstractTypeException;
import de.hybris.platform.jalo.type.JaloGenericCreationException;
import de.hybris.platform.testframework.HybrisJUnit4TransactionalTest;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;


/**
 * Tests the SavedQuery <li>DuplicateProductSearch <li>DuplicateCategorySearch <li>DuplicateKeywordSearch <li>
 * DuplicateMediaSearch .. which were generated by the CatalogManager during System Initialization
 */
@IntegrationTest
public class CatalogRelatedSavedQueryTest extends HybrisJUnit4TransactionalTest
{
	private CatalogManager cManager;
	private CatalogVersion version;
	private Keyword keyword;
	private Language langDE;

	//catalog
	private static final String CATALOG_ID = "hybris";
	private static final String CATALOG_NAME = "Test Catalog";

	protected static final String CATALOGVERSION_LANGUAGE_DE = "de";

	//catalogversion
	private static final String CATALOGVERSION_VERSION_1 = "1.0";

	// category
	private static final String CATEGORY_ROOT_ID = "0";
	private static final String CATEGORY_ROOT_NAME = "ROOT";
	private static final String CATEGORY_ROOT_DESCRIPTION = "ROOT_DESCRIPTION";
	private static final Integer CATEGORY_ROOT_ORDER = Integer.valueOf(1);

	// product
	private static final String PRODUCT_01_ID = "ARTICLE_01_ID";
	private static final String PRODUCT_01_NAME = "ARTICLE_01_NAME";
	private static final String PRODUCT_01_DESCRIPTION = "ARTICLE_01_DESCRIPTION";

	// media
	private static final String MEDIA_01_ID = "MEDIA_01_ID";
	private static final String MEDIA_01_URL = "MEDIA_01_URL";

	// keyword
	private static final String KEYWORD_1 = "KEYWORD_1";

	@Before
	public void setUp() throws Exception
	{
		cManager = (CatalogManager) jaloSession.getExtensionManager().getExtension(CatalogConstants.EXTENSIONNAME);
		langDE = getOrCreateLanguage(CATALOGVERSION_LANGUAGE_DE);
		createCatalog();
		CatalogManager.getInstance().createSavedQueries(null);
	}

	protected void createCatalog() throws JaloGenericCreationException, JaloAbstractTypeException, ConsistencyCheckException
	{
		//catalog
		final Catalog catalog = cManager.createCatalog(CATALOG_ID, CATALOG_NAME, null);
		assertNotNull("Catalog shouldn't be null", catalog);

		// catalogversion
		version = cManager.createCatalogVersion(catalog, CATALOGVERSION_VERSION_1, langDE);
		assertNotNull("CatalogVersion shouldn't be null", version);

		// keywords
		keyword = cManager.createKeyword(version, KEYWORD_1, langDE);
		assertNotNull("Keyword shouldn't be null", keyword);

		// categories
		final Category root = cManager.createCatalogCategory(version, CATEGORY_ROOT_ID, CATEGORY_ROOT_NAME,
				CATEGORY_ROOT_DESCRIPTION, CATEGORY_ROOT_ORDER, Collections.singletonList(keyword), null);

		// products		
		final Product product = createProduct(PRODUCT_01_ID, PRODUCT_01_NAME, PRODUCT_01_DESCRIPTION, version);
		assertNotNull("Product shouldn't be null", product);

		root.setProducts(Collections.singletonList(product));

		final Media media = createMedia(MEDIA_01_ID, MEDIA_01_URL, version);
		assertNotNull("Media shouldn't be null", media);

		jaloSession.getLinkManager().createLink("media_1", product, media, 0, 0);
		root.setMedias(Collections.singletonList(media));
	}

	protected Product createProduct(final String id, final String name, final String desc, final CatalogVersion catVersion)
			throws JaloGenericCreationException, JaloAbstractTypeException
	{
		final ComposedType type = jaloSession.getTypeManager().getComposedType(Product.class);
		final Map values = new HashMap();
		values.put(Product.CODE, id);
		values.put(Product.NAME, name);
		values.put(Product.DESCRIPTION, desc);
		values.put(CatalogConstants.Attributes.Product.CATALOGVERSION, catVersion);
		return (Product) type.newInstance(values);
	}

	protected Media createMedia(final String id, final String file, final CatalogVersion catVersion)
			throws JaloGenericCreationException, JaloAbstractTypeException
	{
		final ComposedType type = jaloSession.getTypeManager().getComposedType(Media.class);
		final Map values = new HashMap();
		values.put(Media.CODE, id);
		values.put(Media.URL, file);
		values.put(CatalogConstants.Attributes.Media.CATALOGVERSION, catVersion);
		return (Media) type.newInstance(values);
	}

	@Test
	public void testDuplicateProductSearch() throws JaloGenericCreationException, JaloAbstractTypeException
	{
		SearchResult res = execute("DuplicateProductSearch", Product.class);
		assertEquals("There should be no duplicate products at all!", 0, res.getCount());

		createProduct(PRODUCT_01_ID, PRODUCT_01_NAME, PRODUCT_01_DESCRIPTION, version);

		res = execute("DuplicateProductSearch", Product.class);
		assertEquals("There should be 2 duplicate products!", 2, res.getCount());
	}

	@Test
	public void testDuplicateCategorySearch()
	{
		SearchResult res = execute("DuplicateCategorySearch", Category.class);
		assertEquals("There should be no duplicate categories at all!", 0, res.getCount());

		cManager.createCatalogCategory(version, CATEGORY_ROOT_ID, CATEGORY_ROOT_NAME, CATEGORY_ROOT_DESCRIPTION,
				CATEGORY_ROOT_ORDER, Collections.singletonList(keyword), null);

		res = execute("DuplicateCategorySearch", Category.class);
		assertEquals("There should be 2 duplicate categories!", 2, res.getCount());
	}

	@Test
	public void testDuplicateKeywordSearch()
	{
		SearchResult res = execute("DuplicateKeywordSearch", Keyword.class);
		assertEquals("There should be no duplicate products at all!", 0, res.getCount());

		cManager.createKeyword(version, KEYWORD_1, langDE);

		res = execute("DuplicateKeywordSearch", Keyword.class);
		assertEquals("There should be 2 duplicate keywords!", 2, res.getCount());
	}

	@Test
	public void testDuplicateMediaSearch() throws Exception
	{
		SearchResult res = execute("DuplicateMediaSearch", Media.class);
		assertEquals("There should be no duplicate medias at all!", 0, res.getCount());

		createMedia(MEDIA_01_ID, MEDIA_01_URL, version);

		res = execute("DuplicateMediaSearch", Media.class);
		assertEquals("There should be 2 duplicate medias!", 2, res.getCount());
	}

	private SearchResult execute(final String savedQuery, final Class result)
	{
		final SavedQuery query = FlexibleSearch.getInstance().getSavedQuery(savedQuery);
		assertNotNull("Missing query statement!", query);
		final Map values = new HashMap();
		values.put("version", version);
		return FlexibleSearch.getInstance().search(query.getQuery(), values, Collections.singletonList(result), true, // no,
				// dont
				// fail on
				// unknown
				// fields
				true, // yes, need total
				0, -1 // range
				);
	}
}
