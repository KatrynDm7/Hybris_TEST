

# FlagsCollection
type.flagscollection.name=Option

#enumeration types 
type.regexpflag.name=Indicateur RegExp
type.regexpflag.description=Indicateur d'expression régulière pris en compte dans la résolution de l'expression régulière. Ceci s'applique sur le champ / propriété. Les types supportés sont String, Collection, Carte (Map) et tableaux (arrays).
type.RegexpFlag.UNIX_LINES.name=Lignes Unix
type.RegexpFlag.CASE_INSENSITIVE.name=Non sensible à la casse
type.RegexpFlag.COMMENTS.name=Commentaires
type.RegexpFlag.MULTILINE.name=Multiligne
type.RegexpFlag.DOTALL.name=Mode DOTALL
type.RegexpFlag.UNICODE_CASE.name=Unicode pris en charge
type.RegexpFlag.CANON_EQ.name=Canonique

type.validatorlanguage.name=Langues du valideur
type.ValidatorLanguage.BEANSHELL.name=BeanShell

type.severity.name=Niveau de gravité
type.Severity.WARN.name=Avertissement
type.Severity.ERROR.name=Erreurs lors de l'exportation
type.Severity.INFO.name=Infos

#relation types
type.composedtype.constraints.name=Groupes de contraintes
type.AttributeDescriptor.constraints.name=Groupes de contraintes
type.constraintgroup.constraints.name=Contraintes de membre

# ConstraintGroup
type.constraintgroup.name=Groupe de contraintes
type.constraintgroup.interfacename.id=Marqueur de groupe
type.constraintgroup.interfacename.name=Marqueur de l'interface Java unique du groupe
type.constraintgroup.id.name=Identifiant

# AbstractConstraint
type.abstractconstraint.name=Contrainte
type.abstractconstraint.id.name=Identifiant
type.abstractconstraint.id.description=Identifiant de contrainte unique.
type.abstractconstraint.active.name=Activé
type.abstractconstraint.active.description=Lorsqu'elle est définie sur true, la contrainte sera jointe lors du rechargement du moteur de validation.
type.abstractconstraint.needreload.name=Nécessite un rechargement
type.abstractconstraint.needreload.description=Lorsqu'elle est définie sur true, la contrainte change après le dernier rechargement de l'infrastructure de validation.
type.abstractconstraint.annotation.name=Classe d'annotation
type.abstractconstraint.annotation.description=Littéral de nom de classe complet pour une annotation correspondante.
type.abstractconstraint.defaultMessage.name=Message d'erreur par défaut
type.abstractconstraint.defaultMessage.description=L'offre groupée de ressources localisées a évalué un message d'erreur.
type.abstractconstraint.message.name=Message d'erreur
type.abstractconstraint.message.description=Conseil : utilisez des espaces réservés (entre accolades) pour les attributs de contrainte. Par exemple : la taille doit être comprise entre {min} et {max}.
type.abstractconstraint.severity.name=Gravité
type.abstractconstraint.severity.description=Niveau de gravité.
type.abstractconstraint.target.name=Classe à valider
type.abstractconstraint.target.description=Classe cible couverte par la logique de validation.
type.abstractconstraint.type.name=Type composé à valider
type.abstractconstraint.type.description=Type composé à valider. En définissant cet attribut, l'attribut "Classe à valider" sera automatiquement renseigné.
type.abstractconstraint.constraintgroups.name=Groupes de contraintes
type.abstractconstraint.constraintgroups.description=La contrainte est liée aux groupes de contraintes suivants. Lorsqu'elle est définie sur null, le groupe {Default} sera utilisé.

# TypeConstraint
type.typeconstraint.name=Contrainte de type composé

# AttributeConstraint
type.attributeconstraint.name=Contrainte d'attribut
type.attributeconstraint.qualifier.name=Qualificateur à valider
type.attributeconstraint.qualifier.description=Qualificateur à valider.
type.attributeconstraint.descriptor.name=Descripteur d'attribut à valider
type.attributeconstraint.descriptor.description=Descripteur d'attribut à valider. En définissant cet attribut, les valeurs des attributs "Classe, Type composé et Qualificateur à valider" seront automatiquement renseignées.
type.attributeconstraint.languages.name=Langues de validation
type.attributeconstraint.languages.description=Langues pour lesquelles la contrainte sera appliquée

# DynamicConstraint
type.DynamicConstraint.name=Contrainte dynamique
type.DynamicConstraint.description=Cette contrainte veille à ce que cet élément évalue l'expression fournie afin de permettre son interprétation en tant que résultat booléen.
type.DynamicConstraint.expression.name=Corps du script
type.DynamicConstraint.expression.description=Expression évaluée durant la validation à l'aide de la syntaxe du langage. L'expression renvoie généralement une valeur pouvant être interprétée comme true ou false. 
type.DynamicConstraint.language.name=Langue du script
type.DynamicConstraint.language.description=Langage de l'expression fournie.

# PatternConstraint
type.patternconstraint.name=Contrainte de schéma
type.patternconstraint.description=Cette contrainte permet de veiller à ce qu'une valeur corresponde à l'expression régulière suivante.
type.patternconstraint.flags.name=Indicateurs du schéma Regexp
type.patternconstraint.flags.description=Indicateurs du schéma Regexp.
type.patternconstraint.regexp.name=Expression régulière
type.patternconstraint.regexp.description=Expression régulière.

# PastConstraint
type.pastconstraint.name=Contrainte antérieure
type.pastconstraint.description=Cette contrainte permet de veiller à ce qu'une valeur soit une date située dans le passé.

# FutureConstraint
type.futureconstraint.name=Contrainte future
type.futureconstraint.description=Cette contrainte permet de veiller à ce qu'une valeur soit une date située dans le futur.

# DigitsConstraint
type.digitsconstraint.name=Contrainte de chiffres
type.digitsconstraint.description=Cette contrainte permet de veiller à ce qu'une valeur soit un nombre compris dans la plage acceptée.
type.digitsconstraint.integer.name=Contrainte de la partie des entiers
type.digitsconstraint.integer.description=Contrainte de la partie des entiers
type.digitsconstraint.fraction.name=Contrainte de partie des fractions
type.digitsconstraint.fraction.description=Contrainte de partie des fractions

# MinConstraint
type.minconstraint.name=Contrainte Min
type.minconstraint.description=Cette contrainte permet de veiller à ce qu'une valeur soit supérieure ou égale au minimum spécifié.
type.minconstraint.value.name=Valeur minimale
type.minconstraint.value.description=Valeur minimale

# MaxConstraint
type.maxconstraint.name=Contrainte Max
type.maxconstraint.description=Cette contrainte permet de veiller à ce qu'une valeur soit supérieure ou égale au maximum spécifié.
type.maxconstraint.value.name=Valeur maximale
type.maxconstraint.value.description=Valeur maximale

# DecimalMaxConstraint
type.decimalmaxconstraint.name=Contrainte DecimalMax
type.decimalmaxconstraint.description=Cette contrainte permet de veiller à ce qu'une valeur soit supérieure ou égale au maximum spécifié.
type.decimalmaxconstraint.value.name=Valeur décimale maximale
type.decimalmaxconstraint.value.description=Valeur décimale maximale

# DecimalMinConstraint
type.decimalminconstraint.name=Contrainte DecimalMin
type.decimalminconstraint.description=Cette contrainte permet de veiller à ce qu'une valeur soit supérieure ou égale au minimum spécifié.
type.decimalminconstraint.value.name=Valeur décimale minimale
type.decimalminconstraint.value.description=Valeur décimale minimale

# NullConstraint
type.nullconstraint.name=Contrainte IsNull
type.nullconstraint.description=Cette contrainte permet de veiller à ce qu'une valeur soit nulle.

# NotNullConstraint
type.notnullconstraint.name=Contrainte IsNotNull
type.notnullconstraint.description=Cette contrainte permet de veiller à ce qu'une valeur ne soit pas nulle.

# AssertTrueConstraint
type.asserttrueconstraint.name=Contrainte AssertTrue
type.asserttrueconstraint.description=Cette valeur permet de s'assurer qu'une valeur est vraie.

#AssertFalseConstraint
type.assertfalseconstraint.name=Contrainte AssertFalse
type.assertfalseconstraint.description=Cette contrainte permet de s'assurer qu'une valeur est fausse.
 
# SizeConstraint
type.sizeconstraint.name=Contrainte de taille
type.sizeconstraint.description=Cette contrainte permet de veiller à ce que la taille de l'élément en question se trouve dans les limites spécifiées (incluses). Elle s'applique à un champ et à une propriété. Les types pris en charge sont String, Collection, Map et Array. Les éléments nuls sont considérés comme valides.
type.sizeconstraint.min.name=Valeur minimale de plage
type.sizeconstraint.min.description=Valeur minimale de plage
type.sizeconstraint.max.name=Valeur maximale de plage
type.sizeconstraint.max.description=Valeur maximale de plage

#XorConstraint
type.XorNullReferenceConstraint.name=Contrainte Xor
type.XorNullReferenceConstraint.description=Cette contrainte permet de garantir que des valeurs d'attribut définies par éléments correspondent à l'opérateur XOR (une et seulement une à la fois n'est pas nulle).
type.XorNullReferenceConstraint.firstFieldName.name=Qualificateur de premier champ
type.XorNullReferenceConstraint.firstFieldName.description=Qualificateur du premier champ sélectionné.
type.XorNullReferenceConstraint.secondFieldName.name=Qualificateur de deuxième champ
type.XorNullReferenceConstraint.secondFieldName.description=Qualificateur du deuxième champ sélectionné.

# NotEmptyConstraint
type.NotEmptyConstraint.name=Contrainte de chaîne NotEmpty
type.NotEmptyConstraint.description=Cette contrainte permet de garantir que la valeur n'est pas vide.

# NotBlankConstraint
type.NotBlankConstraint.name=Contrainte NotBlank de chaîne
type.NotBlankConstraint.description=Cette contrainte permet de garantir qu'une valeur n'est pas vide.

# CoverageConstraintGroup
type.CoverageConstraintGroup.name=Groupe de contraintes de couverture
type.CoverageConstraintGroup.description=Groupe de contraintes utilisé pour le calcul de la couverture
type.CoverageConstraintGroup.dedicatedTypes.name=Types dédiés
type.CoverageConstraintGroup.dedicatedTypes.description=
type.CoverageConstraintGroup.coverageDomainID.name=ID de domaine
type.CoverageConstraintGroup.coverageDomainID.description=

type.HybrisDecimalMaxConstraint.name=Contrainte de décimale maximale
type.HybrisDecimalMaxConstraint.description=Cette contrainte permet de garantir que les valeurs d'attribut définies par élément ne dépassent pas le seuil défini.
type.HybrisDecimalMaxConstraint.value.name=Valeur limite
type.HybrisDecimalMaxConstraint.value.description=

type.HybrisDecimalMinConstraint.name=Contrainte de décimale minimale
type.HybrisDecimalMinConstraint.description=Cette contrainte permet de garantir que les valeurs d'attribut définies par élément ne sont pas inférieures au plancher défini.
type.HybrisDecimalMinConstraint.value.name=Valeur limite
type.HybrisDecimalMinConstraint.value.description=