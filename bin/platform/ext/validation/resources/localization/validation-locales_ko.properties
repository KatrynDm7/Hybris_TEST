

# FlagsCollection
type.flagscollection.name=옵션

#enumeration types 
type.regexpflag.name=RegExp 플래그
type.regexpflag.description=정규 표현식을 해결할 때 고려할 정규 표현식 플래그입니다.
type.RegexpFlag.UNIX_LINES.name=Unix-라인
type.RegexpFlag.CASE_INSENSITIVE.name=대/소문자 구분
type.RegexpFlag.COMMENTS.name=주석
type.RegexpFlag.MULTILINE.name=다중 라인
type.RegexpFlag.DOTALL.name=DOTALL 모드
type.RegexpFlag.UNICODE_CASE.name=유니코드-지원
type.RegexpFlag.CANON_EQ.name=정식

type.validatorlanguage.name=유효성 검사기 언어
type.ValidatorLanguage.BEANSHELL.name=BeanShell

type.severity.name=보안 수준
type.Severity.WARN.name=경고
type.Severity.ERROR.name=오류
type.Severity.INFO.name=정보

#relation types
type.composedtype.constraints.name=제약 조건 그룹
type.AttributeDescriptor.constraints.name=제약 조건 그룹
type.constraintgroup.constraints.name=구성원 제약 조건

# ConstraintGroup
type.constraintgroup.name=제약 조건 그룹
type.constraintgroup.interfacename.id=그룹의 마커
type.constraintgroup.interfacename.name=그룹의 고유한 Java 인터페이스 마커
type.constraintgroup.id.name=ID

# AbstractConstraint
type.abstractconstraint.name=제약 조건
type.abstractconstraint.id.name=ID
type.abstractconstraint.id.description=고유 제약 조건 식별자입니다.
type.abstractconstraint.active.name=활성화됨
type.abstractconstraint.active.description=true로 설정한 경우 유효성 검사 엔진을 다시 로드하는 동안 제약 조건이 연결됩니다.
type.abstractconstraint.needreload.name=다시 로드해야 함
type.abstractconstraint.needreload.description=true인 경우 유효성 검사 프레임워크를 마지막으로 다시 로드한 이후로 제약 조건이 달라집니다.
type.abstractconstraint.annotation.name=주석 클래스
type.abstractconstraint.annotation.description=해당 주석에 대한 전체 클래스 이름 리터럴입니다.
type.abstractconstraint.defaultMessage.name=기본 오류 메시지
type.abstractconstraint.defaultMessage.description=현지화된 리소스 번들 평가 오류 메시지입니다.
type.abstractconstraint.message.name=오류 메시지
type.abstractconstraint.message.description=힌트: 제약 조건 특성에 대한 자리 표시자(중괄호로 표시)를 사용하십시오. 예를 들어: 크기는 {min} 및 {max} 사이어야 합니다.
type.abstractconstraint.severity.name=심각도
type.abstractconstraint.severity.description=심각도 수준입니다.
type.abstractconstraint.target.name=유효성을 검사할 클래스
type.abstractconstraint.target.description=유효성 검사 논리가 적용되는 대상 클래스입니다.
type.abstractconstraint.type.name=유효성을 검사할 작성된 유형
type.abstractconstraint.type.description=유효성을 검사할 작성된 유형입니다. 이 특성을 설정하면 '유효성을 검사할 클래스' 특성이 자동으로 채워집니다.
type.abstractconstraint.constraintgroups.name=제약 조건 그룹
type.abstractconstraint.constraintgroups.description=제약 조건이 다음 제약 조건 그룹에 연결됩니다. null로 설정한 경우 그룹 {Default}가 사용됩니다.

# TypeConstraint
type.typeconstraint.name=ComposedType 제약 조건

# AttributeConstraint
type.attributeconstraint.name=특성 제약 조건
type.attributeconstraint.qualifier.name=유효성을 검사할 한정자
type.attributeconstraint.qualifier.description=유효성을 검사할 한정자입니다.
type.attributeconstraint.descriptor.name=유효성을 검사할 특성 설명자
type.attributeconstraint.descriptor.description=유효성을 검새할 특성 설명자입니다. 이 특성을 설정하면 '클래스, 작성된 유형 및 유효성을 검사할 한정자' 특성의 값이 자동으로 채워집니다.
type.attributeconstraint.languages.name=유효성 검사 언어
type.attributeconstraint.languages.description=제약 조건이 적용되는 언어

# DynamicConstraint
type.DynamicConstraint.name=동적 제약 조건
type.DynamicConstraint.description=이 제약 조건을 사용하면 부울 결과로 해석할 수 있도록 요소가 제공된 표형식을 평가해야 합니다.
type.DynamicConstraint.expression.name=스크립트 본문
type.DynamicConstraint.expression.description=정의된 언어 구문을 사용하여 유효성을 검사하는 동안 평가된 표현식입니다.\n 표현식은 true 또는 false로 해석할 수 있는 값을 반환해야 합니다. 
type.DynamicConstraint.language.name=스크립트 언어
type.DynamicConstraint.language.description=제공된 표현식의 언어입니다.

# PatternConstraint
type.patternconstraint.name=패턴 제약 조건
type.patternconstraint.description=이 제약 조건을 사용하면 값이 다음 정규 표현식과 일치해야 합니다.
type.patternconstraint.flags.name=Regexp 패턴 플래그
type.patternconstraint.flags.description=Regexp 패턴 플래그입니다.
type.patternconstraint.regexp.name=정규 표현식
type.patternconstraint.regexp.description=정규 표현식입니다.

# PastConstraint
type.pastconstraint.name=과거 제약 조건
type.pastconstraint.description=이 제약 조건을 사용하면 값이 과거의 날짜여야 합니다.

# FutureConstraint
type.futureconstraint.name=미래 제약 조건
type.futureconstraint.description=이 제약 조건을 사용하면 값이 미래의 날짜여야 합니다.

# DigitsConstraint
type.digitsconstraint.name=숫자 제약 조건
type.digitsconstraint.description=이 제약 조건을 사용하면 값이 허용된 범위 내의 숫자여야 합니다.
type.digitsconstraint.integer.name=정수 부분 제약 조건
type.digitsconstraint.integer.description=정수 부분 제약 조건
type.digitsconstraint.fraction.name=분수 부분 제약 조건
type.digitsconstraint.fraction.description=분수 부분 제약 조건

# MinConstraint
type.minconstraint.name=Min 제약 조건
type.minconstraint.description=이 제약 조건을 사용하면 값이 지정된 최소값보다 크거나 같아야 합니다.
type.minconstraint.value.name=최소값
type.minconstraint.value.description=최소값

# MaxConstraint
type.maxconstraint.name=최대 제약 조건
type.maxconstraint.description=이 제약 조건을 사용하면 값이 지정된 최대값보다 크거나 같아야 합니다.
type.maxconstraint.value.name=최대값
type.maxconstraint.value.description=최대값

# DecimalMaxConstraint
type.decimalmaxconstraint.name=DecimalMax 제약 조건
type.decimalmaxconstraint.description=이 제약 조건을 사용하면 값이 지정된 최대값보다 크거나 같아야 합니다.
type.decimalmaxconstraint.value.name=최대 십진수 값
type.decimalmaxconstraint.value.description=최대 십진수 값

# DecimalMinConstraint
type.decimalminconstraint.name=DecimalMin 제약 조건
type.decimalminconstraint.description=이 제약 조건을 사용하면 값이 지정된 최소값보다 크거나 같아야 합니다.
type.decimalminconstraint.value.name=최소 십진수 값
type.decimalminconstraint.value.description=최소 십진수 값

# NullConstraint
type.nullconstraint.name=IsNull 제약 조건
type.nullconstraint.description=이 제약 조건을 사용하면 값이 null이어야 합니다.

# NotNullConstraint
type.notnullconstraint.name=IsNotNull 제약 조건
type.notnullconstraint.description=이 제약 조건을 사용하면 값이 null이 아니어야 합니다.

# AssertTrueConstraint
type.asserttrueconstraint.name=AssertTrue 제약 조건
type.asserttrueconstraint.description=이 제약 조건을 사용하면 값이 true여야 합니다.

#AssertFalseConstraint
type.assertfalseconstraint.name=AssertFalse 제약 조건
type.assertfalseconstraint.description=이 제약 조건을 사용하면 값이 false여야 합니다.
 
# SizeConstraint
type.sizeconstraint.name=크기 제약 조건
type.sizeconstraint.description=이 제약 조건을 사용하면 해당 요소의 크기가 지정된 경계(포함) 내에 있어야 합니다. 이 제약 조건은 필드와 속성 모두에 적용됩니다. 지원되는 유형은 문자열, 컬렉션, 맵 및 배열입니다. Null 요소는 유효한 것으로 간주됩니다.
type.sizeconstraint.min.name=최소 범위 값
type.sizeconstraint.min.description=최소 범위 값
type.sizeconstraint.max.name=최대 범위 값
type.sizeconstraint.max.description=최대 범위 값

#XorConstraint
type.XorNullReferenceConstraint.name=Xor 제약 조건
type.XorNullReferenceConstraint.description=이 제약 조건을 사용하면 요소에서 정의된 특성 값이 XOR 연산자를 충족해야 합니다(한 번 및 단 한 번만 null이 아님).
type.XorNullReferenceConstraint.firstFieldName.name=첫 번째 필드 한정자
type.XorNullReferenceConstraint.firstFieldName.description=첫 번째 확인된 필드의 한정자입니다.
type.XorNullReferenceConstraint.secondFieldName.name=두 번째 필드 한정자
type.XorNullReferenceConstraint.secondFieldName.description=두 번째 확인된 필드의 한정자입니다.

# NotEmptyConstraint
type.NotEmptyConstraint.name=문자열 NotEmpty 제약 조건
type.NotEmptyConstraint.description=이 제약 조건을 사용하면 값이 비어 있어서는 안 됩니다.

# NotBlankConstraint
type.NotBlankConstraint.name=문자열 NotBlank 제약 조건
type.NotBlankConstraint.description=이 제약 조건을 사용하면 값이 비어 있어서는 안 됩니다.

# CoverageConstraintGroup
type.CoverageConstraintGroup.name=적용 범위 제약 조건 그룹
type.CoverageConstraintGroup.description=적용 범위 계산에 사용되는 제약 조건 그룹
type.CoverageConstraintGroup.dedicatedTypes.name=전용 유형
type.CoverageConstraintGroup.dedicatedTypes.description=
type.CoverageConstraintGroup.coverageDomainID.name=도메인 ID
type.CoverageConstraintGroup.coverageDomainID.description=

type.HybrisDecimalMaxConstraint.name=십진수 최대 제약 조건
type.HybrisDecimalMaxConstraint.description=이 제약 조건을 사용하면 요소에서 정의된 특성 값이 최대 한도를 초과해서는 안 됩니다.
type.HybrisDecimalMaxConstraint.value.name=한계 값
type.HybrisDecimalMaxConstraint.value.description=

type.HybrisDecimalMinConstraint.name=십진수 최소 제약 조건
type.HybrisDecimalMinConstraint.description=이 제약 조건을 사용하면 요소에서 정의된 특성 값이 최소 한도를 초과해서는 안 됩니다.
type.HybrisDecimalMinConstraint.value.name=한계 값
type.HybrisDecimalMinConstraint.value.description=