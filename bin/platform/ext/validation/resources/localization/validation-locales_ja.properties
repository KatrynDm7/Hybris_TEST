

# FlagsCollection
type.flagscollection.name=オプション

#enumeration types 
type.regexpflag.name=正規表現フラグ
type.regexpflag.description=正規表現を解決するときに正規表現フラグが考慮されます.
type.RegexpFlag.UNIX_LINES.name=Unix ライン
type.RegexpFlag.CASE_INSENSITIVE.name=大文字小文字を区別しない
type.RegexpFlag.COMMENTS.name=コメント
type.RegexpFlag.MULTILINE.name=マルチライン
type.RegexpFlag.DOTALL.name=DOTALL モード
type.RegexpFlag.UNICODE_CASE.name=Unicode 対応
type.RegexpFlag.CANON_EQ.name=カノニカル

type.validatorlanguage.name=バリデーター言語
type.ValidatorLanguage.BEANSHELL.name=BeanShell

type.severity.name=深刻度
type.Severity.WARN.name=警告
type.Severity.ERROR.name=エラー
type.Severity.INFO.name=情報

#relation types
type.composedtype.constraints.name=制約グループ
type.AttributeDescriptor.constraints.name=制約グループ
type.constraintgroup.constraints.name=メンバー制約

# ConstraintGroup
type.constraintgroup.name=制約グループ
type.constraintgroup.interfacename.id=グループのマーカー
type.constraintgroup.interfacename.name=グループの固有の Java インターフェイス マーカー
type.constraintgroup.id.name=ID

# AbstractConstraint
type.abstractconstraint.name=制約
type.abstractconstraint.id.name=ID
type.abstractconstraint.id.description=一意の制約識別子.
type.abstractconstraint.active.name=有効
type.abstractconstraint.active.description=真に設定した場合、検証エンジンを再読み込みしているときに、制約が付加されます.
type.abstractconstraint.needreload.name=再読み込みを必要とします
type.abstractconstraint.needreload.description=真の場合、検証フレームワークの最後の再読み込み以降で制約が異なります.
type.abstractconstraint.annotation.name=注釈クラス
type.abstractconstraint.annotation.description=対応する注釈の完全クラス名リテラル.
type.abstractconstraint.defaultMessage.name=既定のエラー メッセージ
type.abstractconstraint.defaultMessage.description=ローカライズ リソース バンドル評価エラー メッセージ.
type.abstractconstraint.message.name=エラー メッセージ
type.abstractconstraint.message.description=ヒント： 制限属性にはプレースホルダー（中括弧）を使用します。例： サイズは {min} と {max} の範囲内で掃ければなりません.
type.abstractconstraint.severity.name=深刻度
type.abstractconstraint.severity.description=深刻度.
type.abstractconstraint.target.name=検証するクラス
type.abstractconstraint.target.description=検証ロジックによってカバーされているターゲット クラス.
type.abstractconstraint.type.name=検証するコンポーズド タイプ
type.abstractconstraint.type.description=検証するコンポーズド タイプ。この属性を設定すると、「検証するクラス」属性が自動的に記入されます.
type.abstractconstraint.constraintgroups.name=制約グループ
type.abstractconstraint.constraintgroups.description=制約は次の gconstraint グループにリンクされています。null に設定した場合は、グループ {Default} が使用されます.

# TypeConstraint
type.typeconstraint.name=ComposedType 制約

# AttributeConstraint
type.attributeconstraint.name=属性制約
type.attributeconstraint.qualifier.name=検証する修飾子
type.attributeconstraint.qualifier.description=検証する修飾子.
type.attributeconstraint.descriptor.name=検証する属性記述子
type.attributeconstraint.descriptor.description=検証する属性記述子。この属性を設定すると、「検証するクラス、コンポーズド タイプ、および修飾子」属性が自動的に記入されます.
type.attributeconstraint.languages.name=検証言語
type.attributeconstraint.languages.description=制約が実行される言語

# DynamicConstraint
type.DynamicConstraint.name=動的制約
type.DynamicConstraint.description=この制約を使用して、要素は提供された式を評価しなければならないので、ブール演算結果として解釈できます.
type.DynamicConstraint.expression.name=スクリプト ボディ
type.DynamicConstraint.expression.description=定義された言語構文を使用して検証に評価された式。 \n式は、真または偽として解釈できる値を返す必要があります。 
type.DynamicConstraint.language.name=スクリプト言語
type.DynamicConstraint.language.description=提供された式の言語.

# PatternConstraint
type.patternconstraint.name=パターン制約
type.patternconstraint.description=この制約を使用して、値が次の正規表現と一致するようにします.
type.patternconstraint.flags.name=正規表現パターン フラグ
type.patternconstraint.flags.description=正規表現パターン フラグ.
type.patternconstraint.regexp.name=正規表現
type.patternconstraint.regexp.description=正規表現.

# PastConstraint
type.pastconstraint.name=過去の制約
type.pastconstraint.description=この制約を使用して、値を必ず過去の日付にします.

# FutureConstraint
type.futureconstraint.name=将来の制約
type.futureconstraint.description=この制約により、値は将来の日付でなければならなくなります.

# DigitsConstraint
type.digitsconstraint.name=桁数の制約
type.digitsconstraint.description=この制約を使用して、値を承認範囲内の数字にします.
type.digitsconstraint.integer.name=整数部の制約
type.digitsconstraint.integer.description=整数部の制約
type.digitsconstraint.fraction.name=小数部の制約
type.digitsconstraint.fraction.description=小数部の制約

# MinConstraint
type.minconstraint.name=最小制約
type.minconstraint.description=この制約を使用して、値が指定された最小値以上になるようにします.
type.minconstraint.value.name=最小値
type.minconstraint.value.description=最小値

# MaxConstraint
type.maxconstraint.name=最大制約
type.maxconstraint.description=この制約を使用して、値が指定された最大値以下になるようにします.
type.maxconstraint.value.name=最大値
type.maxconstraint.value.description=最大値

# DecimalMaxConstraint
type.decimalmaxconstraint.name=10 進最大制約
type.decimalmaxconstraint.description=この制約を使用して、値が指定された最大値以下になるようにします.
type.decimalmaxconstraint.value.name=最大 10 進数値
type.decimalmaxconstraint.value.description=最大 10 進数値

# DecimalMinConstraint
type.decimalminconstraint.name=10 進最小制限
type.decimalminconstraint.description=この制約を使用して、値が指定された最小値以上になるようにします.
type.decimalminconstraint.value.name=最小 10 進数値
type.decimalminconstraint.value.description=最小 10 進数値

# NullConstraint
type.nullconstraint.name=IsNull 制約
type.nullconstraint.description=この制約を使用して、値が null になるようにします.

# NotNullConstraint
type.notnullconstraint.name=IsNotNull 制約
type.notnullconstraint.description=この制約を使用して、値が null でないようにします.

# AssertTrueConstraint
type.asserttrueconstraint.name=AssertTrue 制約
type.asserttrueconstraint.description=この制約を使用して、値が真になるようにします.

#AssertFalseConstraint
type.assertfalseconstraint.name=AssertFalse 制約
type.assertfalseconstraint.description=この制約を使用して、値が偽になるようにします.
 
# SizeConstraint
type.sizeconstraint.name=サイズ制約
type.sizeconstraint.description=この制約を使用して、問題のエレメントのサイズは指定されたバウンダリ以内になるようにします。フィールドおよびプロパティの両方に適用されます。サポートされるタイプは、ストリング、コレクション、マップ、およびアレイです。null 要素は有効とみなされます.
type.sizeconstraint.min.name=最小範囲値
type.sizeconstraint.min.description=最小範囲値
type.sizeconstraint.max.name=最大範囲値
type.sizeconstraint.max.description=最大範囲値

#XorConstraint
type.XorNullReferenceConstraint.name=Xor 制約
type.XorNullReferenceConstraint.description=この制約を使用して、属性値を定義した要素が XOR 演算子を満たすようにします（一度に 1 つのみが null ではない）.
type.XorNullReferenceConstraint.firstFieldName.name=最初のフィールド修飾子
type.XorNullReferenceConstraint.firstFieldName.description=最初のチェック済みフィールドの修飾子.
type.XorNullReferenceConstraint.secondFieldName.name=2 番目のフィールド修飾子
type.XorNullReferenceConstraint.secondFieldName.description=2 番目のチェック済みフィールドの修飾子.

# NotEmptyConstraint
type.NotEmptyConstraint.name=String NotEmpty 制約
type.NotEmptyConstraint.description=この制約を使用して、値が空白でないようにします.

# NotBlankConstraint
type.NotBlankConstraint.name=String NotBlank 制約
type.NotBlankConstraint.description=この制約を使用して、値が空白でないようにします.

# CoverageConstraintGroup
type.CoverageConstraintGroup.name=範囲制約グループ
type.CoverageConstraintGroup.description=範囲計算のために使用する制約グループ
type.CoverageConstraintGroup.dedicatedTypes.name=専用タイプ
type.CoverageConstraintGroup.dedicatedTypes.description=
type.CoverageConstraintGroup.coverageDomainID.name=ドメイン ID
type.CoverageConstraintGroup.coverageDomainID.description=

type.HybrisDecimalMaxConstraint.name=最大制約（小数値）
type.HybrisDecimalMaxConstraint.description=この制約を使用して、要素により定義される属性の値が最大範囲を超えないようにします.
type.HybrisDecimalMaxConstraint.value.name=制限値
type.HybrisDecimalMaxConstraint.value.description=

type.HybrisDecimalMinConstraint.name=最小制約（小数値）
type.HybrisDecimalMinConstraint.description=この制約を使用して、要素により定義される属性の値が最低範囲を超えないようにします.
type.HybrisDecimalMinConstraint.value.name=制限値
type.HybrisDecimalMinConstraint.value.description=