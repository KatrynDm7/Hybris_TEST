<?xml version="1.0" encoding="iso-8859-1"?>

<web-app id="hac" version="3.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" 
         metadata-complete="true">
  <absolute-ordering />
  
	<display-name>hac</display-name>

	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>

	<login-config>
		<auth-method>BASIC</auth-method>
	</login-config>

	<!-- Error pages -->
	
 	<error-page>
		<error-code>500</error-code>
		<location>/500.jsp</location>
	</error-page>

	<error-page>
		<error-code>404</error-code>
		<location>/404.jsp</location>
	</error-page>
	
	<error-page>
		<error-code>405</error-code>
		<location>/405.jsp</location>
	</error-page>

	<error-page>
		<error-code>403</error-code>
		<location>/login.jsp?login_error=1</location>
	</error-page>

	<error-page>
		<error-code>401</error-code>
		<location>/login.jsp?login_error=1</location>
	</error-page>
	
	<!-- Filters -->
	<filter>
   		<filter-name>XSSFilter</filter-name>
		<filter-class>de.hybris.platform.servicelayer.web.XSSFilter</filter-class>
	</filter>
	
	<filter>
   	<filter-name>characterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<filter>
		<filter-name>springHacFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

    <filter>
        <filter-name>springHiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>

	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

    <filter>
        <filter-name>MultipartFilter</filter-name>
        <filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class>
    </filter>

	<filter>
		<filter-name>sitemesh</filter-name>
		<filter-class>org.sitemesh.config.ConfigurableSiteMeshFilter</filter-class>
	</filter>

	<!-- Filter Mappings -->
	<filter-mapping>
		<filter-name>XSSFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
 
   <filter-mapping>
     <filter-name>springHacFilterChain</filter-name>
     <url-pattern>/*</url-pattern>
   </filter-mapping>

    <filter-mapping>
        <filter-name>springHiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

    <filter-mapping>
        <filter-name>MultipartFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

	<filter-mapping>
		<filter-name>sitemesh</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


	<!-- Enabling a Spring web application context with 'session' and 'request' scope. - The 'contextConfigLocation' param specifies where 
		your configuration files are located. - The HybrisContextLoaderListener extends the usual SpringContextLoaderListener (which loads 
		the context from specified location) by adding the global application context of the platform as parent context. With having the global 
		context set as parent you can access or override beans of the global and core context. - The RequestContextListener 
		is needed for exposing the 'request' scope to the context. Furthermore it is needed when overriding the 'jalosession' bean for your 
		web application. -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>WEB-INF/config/web-app-config.xml</param-value>
	</context-param>

	<listener>
		<listener-class>de.hybris.platform.spring.HybrisContextLoaderListener</listener-class>
	</listener>

	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>

	<servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>WEB-INF/config/spring-mvc-config.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		<multipart-config>
            <!-- unlimited -->
            <max-file-size>-1</max-file-size>
            <!-- unlimited -->
            <max-request-size>-1</max-request-size>
            <!-- flush to disk if bigger than 1 MB -->
            <file-size-threshold>1048576</file-size-threshold>
        </multipart-config>
	</servlet>

	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	
	<!-- Session config -->

	<session-config>
		<session-timeout>120</session-timeout>
	</session-config>
</web-app> 
